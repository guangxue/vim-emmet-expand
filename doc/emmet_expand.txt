*vim_emmet_expand.txt*    emmet like plugin, come with auto-pair, snippet expanding and more.

                        vim-emmet-expand

CONTENTS                                            *vim-emmet-expand*

    1. Introduction .............................. |emmet-expand-introduction|
    2. Default Settings ...........................|emmet-expand-default|
    3. Mappings ...................................|emmet-expand-mappings|
    4. Features ...................................|emmet-expand-features|
    5. Autoload Helper Functions ..................|emmet-expand-autoload|
    
=================================================================================
INTRODUCTION                                                    *vim-emmet-expand*

vim-emmet-expand is emmet like plugin for vim. It comes with auto-pair feature,
snippet expanding, and all trigger with Tab.

===================================================================================
DEFAULT SETTINGS                                             *emmmet-expand-default*

Default pairs are defined in array.
Type: array
Default: ["", '', (), {}, <>, ``]

===================================================================================
MAPPINGS                                                    *emmmet-expand-mappings*

There are five mapping functions:


map#pairs({pair}, {ftname})                                          *map#pairs()*
            Mappings are register with map#pairs() function. {pair} is array for
            {ftname} filetype. {ftname} need to be set before using this function
            properly.
            Example: >
            >
                call map#pairs(['**', '$$'], 'javascript')
            <

map#ifunc({imaps})                                                   *map#ifunc()*
            map#ifunc() is used for setup imaps. It will use 'inoremap' as default
            mapping, with default arguments '<buffer> <silent> '.
            {imaps} is a dictionary. To map special keys are set to '<Space>', '<Tab>'
            '<CR>', '<Space>' and etc. Special keys need inside angle brackets.
            There are two default function that used in keys, which are mapping to
            each pairs that set in map#pairs(). One is 'append', the other one is
            'close', last one is 'wrap', 'wrap' is used to visual mode. TO set your
            own mapping. Put mapping key and value inside {imaps}.mkeys

            Example: >
            >
                call map#ifunc({'mkeys': {',': 'move#inside'}})
            <
            It will map `,` with autoload function 'move#inside()'.
            Note: for local mapping function, use captial letter as the first function
            name, like 'Changebrackets()'.

map#vfunc({vmaps})                                                   *map#vfunc()*
            map#vfunc() is used for setup vmaps. It will use 'vnoremap' as default
            mapping, with default arguments '<buffer> <silent> '.
            {vmaps} is a dictionary.

map#nfunc({nmaps})                                                   *map#nfunc()*
            map#nfunc() has not implement yet currently. It will implemented in
            the comming updates. It will come with more feature like change, edit,
            delete surrounding brackets, text.

map#exe()                                                            *map#exe()*
            map#exe() is used for executing mappings.

==================================================================================
FEATURES                                                    *emmmet-expand-features*

There are also have supports for auto-pair features.

==================================================================================
AUTOLOAD HELPER FUNCTIONS                                   *emmmet-expand-autload*

This section is about autoload helper functions that might be used in the
future. So some explanation needed.

string manipulation:                     *str-functions* *str-helper-functions*
    str#pchar()                 get previous char at current cursor
    str#nchar()                 get next char at current cursor
    str#pindx()                 get previous index at current cursor
    str#nindx()                 get next index at current cursor
    str#ppchar()                get the char from previous char at current cursor
    str#nnchar()                get the char from next char at current cursor
    str#prev2chars()            get previous two chars from two chars before 
    str#last2chars()            get previous two chars from current cursor
    str#next2chars()            get next two characters at current cursor
    str#matchall()              get a list contains all matched pattern
    str#matchcount()            get the sum of all matched pattern
    str#qs()                    return esacaped single or double quotes
    str#wrap_qs()               return wrap with '()' that return from
                                str#qs()
    str#isalpha()               return True if first char is alpha
    str#isdigit()               return True if first char is digit
    str#ptext()                 get previous text until current cursor position
                                including whitespaces
    str#pptext()                get previous text until previous cursor
                                position including whitespaces
    str#startswith()            return True if a str passed startswith a char
    str#ptext_has()             return True if ptext return from str#ptext()
                                contains specific char
    str#ptext_has_two()         return True if ptext return from str#ptext()
                                contains two specific chars
    str#beforecursor()          return a string from begining of line to
                                current cursor position
    str#aftercursor()           return a string from cursor position util end
                                of current line
    str#expr()                  return a string from first non-blank char to
                                current cursor position
    str#pword()                 return a string from cursor position to first
                                nearest word '[0-9A-Za-z@\.(]\+'
    str#pwordlr()               return a list of strings that on the left side
                                of `pword` and right side of `pword` on the
                                current line
    str#dots()                  return a string that replaced space with '.'
    str#inside_pairs()          return True if current cursor inside pairs
    str#searchrange()
    str#outer_pair()
    str#startlnum_for()
    str#endlnum_for()
    str#outersearchrange()
    str#endc_searchrange()
    str#startc_searchrange()
    str#searchindentrange()
    str#clearRegs()

list manipulation:                     *getlist-functions* *getlist-helper-functions*
    getlist#fromfile()          get a list from a file split each line with sepecified pattern
    getlist#fromlines()         get a list from a range of lines
    getlist#exclude()           get a list from a list excluding certain
                                elements according user passed list
    getlist#odd()               get an odd elements from a list
    getlist#even()              get an even elements from a list

Insert mode completion:                *complete-items-functions* *complete-helper-functions*
    complete#items#startswith()
    complete#items#equals()
    complete#items#user_data()

-------------------------------------------------------------------------------
    str#expr()                                      *str#expr()*
            Get the string before current cursor position from first non-blank
	    whitspace.
	    Example: >
	    # name = models.CharFields(max_length)|
	    expr will get the string before | start from #
	    <
vim:tw=78:ts=8:noet:ft=help:norl:autoindent:
